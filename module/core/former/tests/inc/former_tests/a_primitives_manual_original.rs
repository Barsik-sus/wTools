#[ allow( unused_imports ) ]
use super::*;

#[ derive( Debug, PartialEq ) ]
pub struct Struct1
{
  pub int_1 : i32,
  string_1 : String,
  int_optional_1 : core::option::Option< i32 >,
  string_optional_1 : Option< String >,
}

//

// generated by former
impl Struct1
{
  pub fn former() -> Struct1Former< Struct1, Former::ReturnFormed >
  {
    Struct1Former::< Struct1, the_module::ReturnFormed >::new()
  }
}

//

// generated by former
pub struct Struct1FormerStorage
{
  pub int_1 : core::option::Option< i32 >,
  pub string_1 : core::option::Option< String >,
  pub int_optional_1 :  core::option::Option< i32 >,
  pub string_optional_1 : core::option::Option< String >,
}

impl Default for Struct1FormerStorage
{

  #[ inline( always ) ]
  fn default() -> Self
  {
    Self
    {
      int_1 : core::option::Option::None,
      string_1 : core::option::Option::None,
      int_optional_1 : core::option::Option::None,
      string_optional_1 : core::option::Option::None,
    }
  }

}

//

pub struct Struct1Former
<
  FormerContext = Struct1,
  FormerEnd = the_module::ReturnFormed,
>
where
  FormerEnd : the_module::FormingEnd< Struct1, FormerContext >,
{
  storage : Struct1FormerStorage,
  context : core::option::Option< FormerContext >,
  on_end : core::option::Option< FormerEnd >,
}

impl< FormerContext, FormerEnd > Struct1Former< FormerContext, FormerEnd >
where
  FormerEnd: the_module::FormingEnd<Struct1, FormerContext>,
{

  fn form( mut self ) -> Struct1
  {

    let int_1 = if self.storage.int_1.is_some()
    {
      self.storage.int_1.take().unwrap()
    }
    else
    {
      let val : i32 = Default::default();
      val
    };

    let string_1 = if self.storage.string_1.is_some()
    {
      self.storage.string_1.take().unwrap()
    }
    else
    {
      let val : String = Default::default();
      val
    };

    let int_optional_1 = if self.storage.int_optional_1.is_some()
    {
      Some( self.storage.int_optional_1.take().unwrap() )
    }
    else
    {
      None
    };

    let string_optional_1 = if self.storage.string_optional_1.is_some()
    {
      Some( self.storage.string_optional_1.take().unwrap() )
    }
    else
    {
      None
    };

    Struct1
    {
      int_1,
      string_1,
      int_optional_1,
      string_optional_1,
    }

  }

  #[ inline( always ) ]
  pub fn perform(self) -> Struct1
  {
    let result = self.form();
    return result;
  }

  #[ inline( always ) ]
  pub fn new() -> Struct1Former<Struct1, the_module::ReturnFormed>
  {
    Struct1Former::
    <
      Struct1,
      the_module::ReturnFormed,
    >::begin(None, the_module::ReturnFormed)
  }

  #[ inline( always ) ]
  pub fn begin
  (
    context : core::option::Option< FormerContext >,
    on_end : FormerEnd,
  ) -> Self
  {
    Self
    {
      storage : core::default::Default::default(),
      context : context,
      on_end : ::core::option::Option::Some( on_end ),
    }
  }

  #[ inline( always ) ]
  pub fn end( mut self ) -> FormerContext
  {
    let on_end = self.on_end.take().unwrap();
    let context = self.context.take();
    let formed = self.form();
    on_end.call( formed, context )
  }

  pub fn int_1< Src >( mut self, src : Src ) -> Self
  where Src : core::convert::Into< i32 >,
  {
    debug_assert!( self.storage.int_1.is_none() );
    self.storage.int_1 = Some( src.into() );
    self
  }

  pub fn string_1< Src >( mut self, src : Src ) -> Self
  where Src : core::convert::Into< String >,
  {
    debug_assert!( self.storage.string_1.is_none() );
    self.storage.string_1 = Some( src.into() );
    self
  }

  pub fn string_optional_1< Src >( mut self, src : Src ) -> Self
  where Src : core::convert::Into< String >
  {
    debug_assert!( self.storage.string_optional_1.is_none() );
    self.storage.string_optional_1 = Some( src.into() );
    self
  }

}

//

include!( "./only_test/primitives.rs" );
